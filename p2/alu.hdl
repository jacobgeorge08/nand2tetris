
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not


CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0
  PARTS:
    Mux16(a=x, b=false, sel=zx, out=zeroX);
    Mux16(a=y, b=false, sel=zy, out=zeroY);
    Not16(in=zeroX, out=notX);
    Not16(in=zeroY, out=notY);
    Mux16(a=zeroX, b=notX, sel=nx, out=negX);
    Mux16(a=zeroY, b=notY, sel=ny, out=negY);
    Add16(a=negX, b=negY, out=sum16);
    And16(a=negX, b=negY, out=and16);
    Mux16(a=and16, b=sum16, sel=f, out=func);
    Not16(in=func, out=notFunc);
    Mux16(a=func, b=notFunc, sel=no, out[0..7]=outLSB, out[8..14]=outMSB, out[15]=outMSBbit);
    Mux16(a[0..7]=outLSB, a[8..14]=outMSB, a[15]=outMSBbit, b=true, sel=false, out=out);
    Or8Way(in=outLSB, out=oroutLSB);
    Or8Way(in[0..6]=outMSB, in[7]=outMSBbit, out=oroutMSB);
    Or(a=oroutLSB, b=oroutMSB, out=orOut);
    
    Not(in=orOut, out=zr);

    Or(a=outMSBbit, b=false, out=ng);

}

